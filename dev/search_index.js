var documenterSearchIndex = {"docs":
[{"location":"api/#","page":"API","title":"👷","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [RandomLogos]","category":"page"},{"location":"api/#RandomLogos.Affine","page":"API","title":"RandomLogos.Affine","text":"Type for an affine transformation\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomLogos.SigmaFactorIFS","page":"API","title":"RandomLogos.SigmaFactorIFS","text":"Type for sampling IFS based on SVD approach proposed on this page\n\nExamples\n\njulia> using Random, ImageCore\njulia> rng = Xoshiro(0)\njulia> # create an instance of SigmaFactorIFS\njulia> ifs = rand(rng, SigmaFactorIFS{2})\njulia> npoints = 100_000; H = W = 384\njulia> xs, ys = generate_points(rng, ifs, npoints, H, W)\njulia> canvas = zeros(RGB{N0f8}, H, W)\njulia> render!(rng, canvas, xs, ys, ifs)\n\nSee also generate_points, generate_points!, render and render!\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomLogos.generate_points!-Union{Tuple{T}, Tuple{Random.AbstractRNG, Vector, Vector, RandomLogos.SigmaFactorIFS{2, T}, Integer, Integer}} where T<:AbstractFloat","page":"API","title":"RandomLogos.generate_points!","text":"generate_points!(rng::AbstractRNG, xs::Vector, ys::Vector, ifs::SigmaFactorIFS{2,T}, H::Integer, W::Integer) where {T<:AbstractFloat}\n\nIn-place version of generate_points\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomLogos.generate_points-Union{Tuple{T}, Tuple{Random.AbstractRNG, RandomLogos.SigmaFactorIFS{2, T}, Integer, Integer, Integer}} where T<:AbstractFloat","page":"API","title":"RandomLogos.generate_points","text":"generate_points(rng::AbstractRNG, ifs::SigmaFactorIFS{2,T}, n::Integer, H::Integer, W::Integer) where {T<:AbstractFloat}\n\nGenerate a sequence of 2D points based on a given Iterated Function System (IFS) and return the coordinates in two separate arrays, xs and ys. The function uses the provided random number generator rng, IFS object ifs, and three integer parameters: n (the number of points to generate), H (height), and W (width).\n\nArguments\n\nrng::AbstractRNG: An object that generates random numbers.\nifs::SigmaFactorIFS{2,T}: An Iterated Function System (IFS) to be used in generating points.\nn::Integer: The number of points to generate.\nH::Integer: The height of the output space.\nW::Integer: The width of the output space.\n\nReturns\n\nxs: The x-coordinates of the generated points.\nys: The y-coordinates of the generated points.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomLogos.render!-Union{Tuple{T}, Tuple{C}, Tuple{Random.AbstractRNG, Matrix{C}, Vector{T}, Vector{T}, RandomLogos.AbstractIFS{2, T}}} where {C, T<:AbstractFloat}","page":"API","title":"RandomLogos.render!","text":"render!\n\nIn-place version of render\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomLogos.render-Tuple{AbstractString}","page":"API","title":"RandomLogos.render","text":"render(configpath::AbstractString)\n\nLoad TOML configuration file from configpath and convert to config::Config. Then call render(config)\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomLogos.render-Tuple{RandomLogos.Config}","page":"API","title":"RandomLogos.render","text":"render(config::Config)\n\nGenerates a geometry object according to config to be used in generating one.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomLogos.render-Union{Tuple{T}, Tuple{Random.AbstractRNG, RandomLogos.AbstractIFS{2, T}, RandomLogos.Config}} where T","page":"API","title":"RandomLogos.render","text":"render(rng::AbstractRNG, ifs::AbstractIFS{2,T}, config::Config) where {T}\n\nGenerates a graphical rendering of 2D points based on a given Iterated Function System (IFS) and configuration. The rendering is created within the bounds defined by the height H and width W parameters provided in config.\n\nArguments\n\nrng::AbstractRNG: An object that generates random numbers.\nifs::AbstractIFS{2,T}: An Iterated Function System (IFS) to be used in generating points.\nconfig::Config: A configuration object with the following properties:\nnpoints::Integer: The number of points to generate for the rendering.\nH::Integer: The height of the output space (canvas).\nW::Integer: The width of the output space (canvas).\n\nReturns\n\ncanvas: The generated image as an array of RGB values.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomLogos.sample_svs-Union{Tuple{T}, Tuple{Random.AbstractRNG, T, Integer}} where T<:AbstractFloat","page":"API","title":"RandomLogos.sample_svs","text":"sample_svs(rng::AbstractRNG, α::T, N::Integer) where {T <: AbstractFloat}\n\nGiven α so called σ-factor, create N tuples in the form of (σₖ₁, σₖ₂) for k ∈ 1:N such that\n\nalpha = sum_k=1^N sigma_k1 + 2sigma_k2\n\nReturns N by 2 matrix Σ::Matrix{T}(N, 2) that satisfies Σ[k, 1] is σₖ₁ and Σ[k, 2] is σₖ₂.\n\n\n\n\n\n","category":"method"},{"location":"usage/","page":"Usage","title":"Usage","text":"CurrentModule = RandomLogos","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using TOML\nusing Random\nusing Images\n\nusing RandomLogos\nusing RandomLogos: render\nusing RandomLogos: Config","category":"page"},{"location":"usage/#Example(config_mt.toml)","page":"Usage","title":"Example(config_mt.toml)","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"configpath = joinpath(pkgdir(RandomLogos), \"examples\", \"config_mt.toml\")\ntoml = TOML.parsefile(configpath)\ntoml","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"canvas = render(configpath)\ncanvas","category":"page"},{"location":"usage/#Example(config_xoshiro.toml)","page":"Usage","title":"Example(config_xoshiro.toml)","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"configpath = joinpath(pkgdir(RandomLogos), \"examples\", \"config_xoshiro.toml\")\ntoml = TOML.parsefile(configpath)\ntoml","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"canvas = render(configpath)\ncanvas","category":"page"},{"location":"usage/#Example(Generating-multiple-logos)","page":"Usage","title":"Example(Generating multiple logos)","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"We can generate multiple logos as below:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"configpath = joinpath(pkgdir(RandomLogos), \"examples\", \"config_xoshiro.toml\")\nconfig = Config(configpath)\nlogos = Matrix{RGB{N0f8}}[]\nfor s in 1:30\n    rng = MersenneTwister(999 + s)\n    ifs = rand(rng, RandomLogos.SigmaFactorIFS{2})\n    rng = MersenneTwister(999 + 2s)\n    canvas = render(rng, ifs, config)\n    push!(logos, canvas)\nend\n\nreshape(logos, 5, 6)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RandomLogos","category":"page"},{"location":"#RandomLogos","page":"Home","title":"RandomLogos","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RandomLogos.","category":"page"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repository aims to generate fancy fractal objects using an algorithm based on the SVD-based approach for sampling IFS (Iterated Function Systems), as Connor Anderson and Ryan Farrell proposed. While the original authors implemented the algorithm they suggested using Python, our implementation adopts JuliaLang, a JIT-compiled language.","category":"page"},{"location":"#How-to-use","page":"Home","title":"How to use","text":"","category":"section"},{"location":"#Install-Julia","page":"Home","title":"Install Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's install JuliaLang v1.9.1 from https://julialang.org/downloads/. Make sure you can execute the julia command in your terminal:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ date\nFri Jun  9 19:16:08 JST 2023\n$ julia --version\n1.9.1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Go on to the next page Usage","category":"page"}]
}
