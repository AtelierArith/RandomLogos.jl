var documenterSearchIndex = {"docs":
[{"location":"api/#","page":"API","title":"ðŸ‘·","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [RandomLogos]","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"CurrentModule = RandomLogos","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using TOML\nusing Random\nusing Images\n\nusing RandomLogos\nusing RandomLogos: render\nusing RandomLogos: Config","category":"page"},{"location":"usage/#Example(config_mt.toml)","page":"Usage","title":"Example(config_mt.toml)","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"configpath = joinpath(pkgdir(RandomLogos), \"examples\", \"config_mt.toml\")\ntoml = TOML.parsefile(configpath)\ntoml","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"canvas = render(configpath)\ncanvas","category":"page"},{"location":"usage/#Example(config_xoshiro.toml)","page":"Usage","title":"Example(config_xoshiro.toml)","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"configpath = joinpath(pkgdir(RandomLogos), \"examples\", \"config_xoshiro.toml\")\ntoml = TOML.parsefile(configpath)\ntoml","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"canvas = render(configpath)\ncanvas","category":"page"},{"location":"usage/#Example(Generating-multiple-logos)","page":"Usage","title":"Example(Generating multiple logos)","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"We can generate multiple logos as below:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"configpath = joinpath(pkgdir(RandomLogos), \"examples\", \"config_xoshiro.toml\")\nconfig = Config(configpath)\nlogos = Matrix{RGB{N0f8}}[]\nfor s in 1:30\n    rng = MersenneTwister(999 + s)\n    ifs = rand(rng, RandomLogos.SigmaFactorIFS{2})\n    rng = MersenneTwister(999 + 2s)\n    canvas = render(rng, ifs, config)\n    push!(logos, canvas)\nend\n\nreshape(logos, 5, 6)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RandomLogos","category":"page"},{"location":"#RandomLogos","page":"Home","title":"RandomLogos","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RandomLogos.","category":"page"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repository aims to generate fancy fractal objects using an algorithm based on the SVD-based approach for sampling IFS (Iterated Function Systems), as Connor Anderson and Ryan Farrell proposed. While the original authors implemented the algorithm they suggested using Python, our implementation adopts JuliaLang, a JIT-compiled language.","category":"page"},{"location":"#How-to-use","page":"Home","title":"How to use","text":"","category":"section"},{"location":"#Install-Julia","page":"Home","title":"Install Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's install JuliaLang v1.9.1 from https://julialang.org/downloads/. Make sure you can execute the julia command in your terminal:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ date\nFri Jun  9 19:16:08 JST 2023\n$ julia --version\n1.9.1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Go on to the next page Usage","category":"page"}]
}
